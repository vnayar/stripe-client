// File automatically generated from OpenAPI spec.
module stripe.model.subscription;

import vibe.data.serialization : optional;
import vibe.data.json : Json;

import std.typecons : Nullable;

import stripe.model.account : Account;
import stripe.model.application : Application;
import stripe.model.bank_account : BankAccount;
import stripe.model.card : Card;
import stripe.model.customer : Customer;
import stripe.model.deleted_application : DeletedApplication;
import stripe.model.deleted_customer : DeletedCustomer;
import stripe.model.discount : Discount;
import stripe.model.invoice : Invoice;
import stripe.model.payment_method : PaymentMethod;
import stripe.model.setup_intent : SetupIntent;
import stripe.model.source : Source;
import stripe.model.subscription_automatic_tax : SubscriptionAutomaticTax;
import stripe.model.subscription_billing_thresholds : SubscriptionBillingThresholds;
import stripe.model.subscription_item : SubscriptionItem;
import stripe.model.subscription_pending_invoice_item_interval : SubscriptionPendingInvoiceItemInterval;
import stripe.model.subscription_schedule : SubscriptionSchedule;
import stripe.model.subscription_transfer_data : SubscriptionTransferData;
import stripe.model.subscriptions_resource_pause_collection : SubscriptionsResourcePauseCollection;
import stripe.model.subscriptions_resource_payment_settings : SubscriptionsResourcePaymentSettings;
import stripe.model.subscriptions_resource_pending_update : SubscriptionsResourcePendingUpdate;
import stripe.model.tax_rate : TaxRate;
import stripe.model.test_helpers.test_clock : TestHelpersTestClock;

/**
 * Subscriptions allow you to charge a customer on a recurring basis.
 * Related guide: [Creating
 * Subscriptions](https://stripe.com/docs/billing/subscriptions/creating).
 */
class Subscription {
  /**
   * Unique identifier for the object.
   */
  @optional
  Nullable!(string) id;

  /**
   * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will
   * attempt to pay this subscription at the end of the cycle using the default source attached to
   * the customer. When sending an invoice, Stripe will email your customer an invoice with
   * payment instructions and mark the subscription as `active`.
   */
  @optional
  Nullable!(string) collection_method;

  /**
   * The tax rates that will apply to any subscription item that does not have `tax_rates` set.
   * Invoices created will have their `default_tax_rates` populated from the subscription.
   */
  @optional
  TaxRate[] default_tax_rates;

  /**
   * If the subscription has been canceled with the `at_period_end` flag set to `true`,
   * `cancel_at_period_end` on the subscription will be true. You can use this attribute to
   * determine whether a subscription that has a status of active is scheduled to be canceled at
   * the end of the current period.
   */
  @optional
  Nullable!(bool) cancel_at_period_end;

  /**
   * Specifies an interval for how often to bill for any pending invoice items. It is analogous to
   * calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given
   * subscription at the specified interval.
   */
  @optional
  SubscriptionPendingInvoiceItemInterval pending_invoice_item_interval;

  /**
   * If the subscription has a trial, the beginning of that trial.
   */
  @optional
  Nullable!(long) trial_start;

  /**
   * You can use this [SetupIntent](https://stripe.com/docs/api/setup_intents) to collect user
   * authentication when creating a subscription without immediate payment or updating a
   * subscription's payment method, allowing you to optimize for off-session payments. Learn more
   * in the [SCA Migration
   * Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication#scenario-2).
   */
  @optional
  Json pending_setup_intent;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  @optional
  Nullable!(long) created;

  /**
   * The account (if any) the charge was made on behalf of for charges associated with this
   * subscription. See the Connect documentation for details.
   */
  @optional
  Json on_behalf_of;

  /**
   * Number of days a customer has to pay invoices generated by this subscription. This value will
   * be `null` for subscriptions where `collection_method=charge_automatically`.
   */
  @optional
  Nullable!(int) days_until_due;

  /**
   * Date when the subscription was first created. The date might differ from the `created` date
   * due to backdating.
   */
  @optional
  Nullable!(long) start_date;

  static class SubscriptionItemList {
    /**
     * True if this list has another page of items after this one that can be fetched.
     */
    @optional
    Nullable!(bool) has_more;

    /**
     * String representing the object's type. Objects of the same type share the same value. Always
     * has the value `list`.
     */
    @optional
    Nullable!(string) object;

    /**
     * Details about each object.
     */
    @optional
    SubscriptionItem[] data;

    /**
     * The URL where this list can be accessed.
     */
    @optional
    Nullable!(string) url;

  }

  /**
   * List of subscription items, each with an attached price.
   */
  @optional
  SubscriptionItemList items;

  /**
   * ID of the customer who owns the subscription.
   */
  @optional
  Json customer;

  /**
   * Start of the current period that the subscription has been invoiced for.
   */
  @optional
  Nullable!(long) current_period_start;

  /**
   * If the subscription has been canceled, the date of that cancellation. If the subscription was
   * canceled with `cancel_at_period_end`, `canceled_at` will reflect the time of the most recent
   * update request, not the end of the subscription period when the subscription is automatically
   * moved to a canceled state.
   */
  @optional
  Nullable!(long) canceled_at;

  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in
   * lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  @optional
  Nullable!(string) currency;

  /**
   * A non-negative decimal between 0 and 100, with at most two decimal places. This represents
   * the percentage of the subscription invoice subtotal that will be transferred to the
   * application owner's Stripe account.
   */
  @optional
  Nullable!(float) application_fee_percent;

  /**
   * The most recent invoice this subscription has generated.
   */
  @optional
  Json latest_invoice;

  /**
   * ID of the default payment method for the subscription. It must belong to the customer
   * associated with the subscription. This takes precedence over `default_source`. If neither are
   * set, invoices will use the customer's
   * [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#custom
   * er_object-invoice_settings-default_payment_method) or
   * [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source)
   * .
   */
  @optional
  Json default_payment_method;

  /**
   * Payment settings passed on to invoices created by the subscription.
   */
  @optional
  SubscriptionsResourcePaymentSettings payment_settings;

  /**
   * The account (if any) the subscription's payments will be attributed to for tax reporting, and
   * where funds from each payment will be transferred to for each of the subscription's invoices.
   */
  @optional
  SubscriptionTransferData transfer_data;

  /**
   * Determines the date of the first full invoice, and, for plans with `month` or `year`
   * intervals, the day of the month for subsequent invoices. The timestamp is in UTC format.
   */
  @optional
  Nullable!(long) billing_cycle_anchor;

  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an
   * object. This can be useful for storing additional information about the object in a
   * structured format.
   */
  @optional
  Nullable!(string)[string] metadata;

  /**
   * If specified, [pending
   * updates](https://stripe.com/docs/billing/subscriptions/pending-updates) that will be applied
   * to the subscription once the `latest_invoice` has been paid.
   */
  @optional
  SubscriptionsResourcePendingUpdate pending_update;

  /**
   * Define thresholds at which an invoice will be sent, and the subscription advanced to a new
   * billing period
   */
  @optional
  SubscriptionBillingThresholds billing_thresholds;

  /**
   * ID of the Connect Application that created the subscription.
   */
  @optional
  Json application;

  /**
   * The schedule attached to the subscription
   */
  @optional
  Json schedule;

  /**
   * ID of the test clock this subscription belongs to.
   */
  @optional
  Json test_clock;

  /**
   * End of the current period that the subscription has been invoiced for. At the end of this
   * period, a new invoice will be created.
   */
  @optional
  Nullable!(long) current_period_end;

  /**
   * ID of the default payment source for the subscription. It must belong to the customer
   * associated with the subscription and be in a chargeable state. If `default_payment_method` is
   * also set, `default_payment_method` will take precedence. If neither are set, invoices will
   * use the customer's
   * [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#custom
   * er_object-invoice_settings-default_payment_method) or
   * [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source)
   * .
   */
  @optional
  Json default_source;

  /**
   * Describes the current discount applied to this subscription, if there is one. When billing, a
   * discount applied to a subscription overrides a discount applied on a customer-wide basis.
   */
  @optional
  Discount discount;

  /**
   * Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`,
   * `canceled`, or `unpaid`. 
   * For `collection_method=charge_automatically` a subscription moves into `incomplete` if the
   * initial payment attempt fails. A subscription in this state can only have metadata and
   * default_source updated. Once the first invoice is paid, the subscription moves into an
   * `active` state. If the first invoice is not paid within 23 hours, the subscription
   * transitions to `incomplete_expired`. This is a terminal state, the open invoice will be
   * voided and no further invoices will be generated. 
   * A subscription that is currently in a trial period is `trialing` and moves to `active` when
   * the trial period is over. 
   * If subscription `collection_method=charge_automatically` it becomes `past_due` when payment
   * to renew it fails and `canceled` or `unpaid` (depending on your subscriptions settings) when
   * Stripe has exhausted all payment retry attempts. 
   * If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is
   * not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional
   * deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent
   * invoices will be attempted (invoices will be created, but then immediately automatically
   * closed). After receiving updated payment information from a customer, you may choose to
   * reopen and pay their closed invoices.
   */
  @optional
  Nullable!(string) status;

  /**
   * A date in the future at which the subscription will automatically get canceled
   */
  @optional
  Nullable!(long) cancel_at;

  /**
   * If the subscription has a trial, the end of that trial.
   */
  @optional
  Nullable!(long) trial_end;

  /**
   * Specifies the approximate timestamp on which any pending invoice items will be billed
   * according to the schedule provided at `pending_invoice_item_interval`.
   */
  @optional
  Nullable!(long) next_pending_invoice_item_invoice;

  /**
   * If the subscription has ended, the date the subscription ended.
   */
  @optional
  Nullable!(long) ended_at;

  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object
   * exists in test mode.
   */
  @optional
  Nullable!(bool) livemode;

  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  @optional
  Nullable!(string) object;

  /**
   * If specified, payment collection for this subscription will be paused.
   */
  @optional
  SubscriptionsResourcePauseCollection pause_collection;

  /**
   * The subscription's description, meant to be displayable to the customer. Use this field to
   * optionally store an explanation of the subscription for rendering in Stripe surfaces.
   */
  @optional
  Nullable!(string) description;

  @optional
  SubscriptionAutomaticTax automatic_tax;

}
