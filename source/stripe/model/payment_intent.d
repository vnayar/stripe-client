// File automatically generated from OpenAPI spec.
module stripe.model.payment_intent;

import vibe.data.serialization : optional;
import vibe.data.json : Json;
import builder : AddBuilder;

import std.typecons : Nullable;

import stripe.model.account : Account;
import stripe.model.api_errors : ApiErrors;
import stripe.model.application : Application;
import stripe.model.charge : Charge;
import stripe.model.customer : Customer;
import stripe.model.deleted_customer : DeletedCustomer;
import stripe.model.invoice : Invoice;
import stripe.model.payment_flows_amount_details : PaymentFlowsAmountDetails;
import stripe.model.payment_flows_automatic_payment_methods_payment_intent : PaymentFlowsAutomaticPaymentMethodsPaymentIntent;
import stripe.model.payment_intent_next_action : PaymentIntentNextAction;
import stripe.model.payment_intent_payment_method_options : PaymentIntentPaymentMethodOptions;
import stripe.model.payment_intent_processing : PaymentIntentProcessing;
import stripe.model.payment_method : PaymentMethod;
import stripe.model.review : Review;
import stripe.model.shipping : Shipping;
import stripe.model.transfer_data : TransferData;

/**
 * A PaymentIntent guides you through the process of collecting a payment from your customer.
 * We recommend that you create exactly one PaymentIntent for each order or
 * customer session in your system. You can reference the PaymentIntent later to
 * see the history of payment attempts for a particular session.
 * A PaymentIntent transitions through
 * [multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
 * throughout its lifetime as it interfaces with Stripe.js to perform
 * authentication flows and ultimately creates at most one successful charge.
 * Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents).
 */
class PaymentIntent {
  /**
   * Unique identifier for the object.
   */
  @optional
  string id;

  /**
   * A string that identifies the resulting payment as part of a group. See the PaymentIntents
   * [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for
   * details.
   */
  @optional
  string transfer_group;

  /**
   * Amount that can be captured from this PaymentIntent.
   */
  @optional
  Nullable!(int) amount_capturable;

  /**
   * ID of the review associated with this PaymentIntent, if any.
   */
  @optional
  Json review;

  /**
   * The latest charge created by this payment intent.
   */
  @optional
  Json latest_charge;

  /**
   * Email address that the receipt for the resulting payment will be sent to. If `receipt_email`
   * is specified for a payment in live mode, a receipt will be sent regardless of your [email
   * settings](https://dashboard.stripe.com/account/emails).
   */
  @optional
  string receipt_email;

  /**
   * Settings to configure compatible payment methods from the [Stripe
   * Dashboard](https://dashboard.stripe.com/settings/payment_methods)
   */
  @optional
  PaymentFlowsAutomaticPaymentMethodsPaymentIntent automatic_payment_methods;

  /**
   * The payment error encountered in the previous PaymentIntent confirmation. It will be cleared
   * if the PaymentIntent is later updated for any reason.
   */
  @optional
  ApiErrors last_payment_error;

  @optional
  PaymentFlowsAmountDetails amount_details;

  /**
   * Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`,
   * `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally
   * (`failed_invoice`, `void_invoice`, or `automatic`).
   */
  @optional
  string cancellation_reason;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  @optional
  Nullable!(long) created;

  /**
   * Amount that was collected by this PaymentIntent.
   */
  @optional
  Nullable!(int) amount_received;

  /**
   * The account (if any) for which the funds of the PaymentIntent are intended. See the
   * PaymentIntents [use case for connected
   * accounts](https://stripe.com/docs/payments/connected-accounts) for details.
   */
  @optional
  Json on_behalf_of;

  /**
   * ID of the invoice that created this PaymentIntent, if it exists.
   */
  @optional
  Json invoice;

  /**
   * Controls when the funds will be captured from the customer's account.
   */
  @optional
  string capture_method;

  /**
   * ID of the Customer this PaymentIntent belongs to, if one exists.
   * Payment methods attached to other Customers cannot be used with this PaymentIntent.
   * If present in combination with
   * [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage),
   * this PaymentIntent's payment method will be attached to the Customer after the PaymentIntent
   * has been confirmed and any required actions from the user are complete.
   */
  @optional
  Json customer;

  /**
   * Populated when `status` is `canceled`, this is the time at which the PaymentIntent was
   * canceled. Measured in seconds since the Unix epoch.
   */
  @optional
  Nullable!(long) canceled_at;

  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in
   * lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  @optional
  string currency;

  /**
   * The data with which to automatically create a Transfer when the payment is finalized. See the
   * PaymentIntents [use case for connected
   * accounts](https://stripe.com/docs/payments/connected-accounts) for details.
   */
  @optional
  TransferData transfer_data;

  /**
   * Amount intended to be collected by this PaymentIntent. A positive integer representing how
   * much to charge in the [smallest currency
   * unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or
   * 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent
   * in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts).
   * The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of
   * $999,999.99).
   */
  @optional
  Nullable!(int) amount;

  /**
   * If present, this property tells you what actions you need to take in order for your customer
   * to fulfill a payment using the provided source.
   */
  @optional
  PaymentIntentNextAction next_action;

  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an
   * object. This can be useful for storing additional information about the object in a
   * structured format. For more information, see the
   * [documentation](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#sto
   * ring-information-in-metadata).
   */
  @optional
  string[string] metadata;

  /**
   * ID of the Connect application that created the PaymentIntent.
   */
  @optional
  Json application;

  /**
   * ID of the payment method used in this PaymentIntent.
   */
  @optional
  Json payment_method;

  /**
   * If present, this property tells you about the processing state of the payment.
   */
  @optional
  PaymentIntentProcessing processing;

  /**
   * The amount of the application fee (if any) that will be requested to be applied to the
   * payment and transferred to the application owner's Stripe account. The amount of the
   * application fee collected will be capped at the total payment amount. For more information,
   * see the PaymentIntents [use case for connected
   * accounts](https://stripe.com/docs/payments/connected-accounts).
   */
  @optional
  Nullable!(int) application_fee_amount;

  /**
   * Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`,
   * `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more
   * about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
   */
  @optional
  string status;

  /**
   * For non-card charges, you can use this value as the complete description that appears on your
   * customers’ statements. Must contain at least one letter, maximum 22 characters.
   */
  @optional
  string statement_descriptor;

  /**
   * Payment-method-specific configuration for this PaymentIntent.
   */
  @optional
  PaymentIntentPaymentMethodOptions payment_method_options;

  @optional
  string confirmation_method;

  /**
   * The client secret of this PaymentIntent. Used for client-side retrieval using a publishable
   * key. 
   * The client secret can be used to complete a payment from your frontend. It should not be
   * stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS
   * enabled on any page that includes the client secret.
   * Refer to our docs to [accept a
   * payment](https://stripe.com/docs/payments/accept-a-payment?ui=elements) and learn about how
   * `client_secret` should be handled.
   */
  @optional
  string client_secret;

  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object
   * exists in test mode.
   */
  @optional
  Nullable!(bool) livemode;

  /**
   * Provides information about a card payment that customers see on their statements.
   * Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on
   * the account to form the complete statement descriptor. Maximum 22 characters for the
   * concatenated descriptor.
   */
  @optional
  string statement_descriptor_suffix;

  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   * Providing this parameter will [attach the payment
   * method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's
   * Customer, if present, after the PaymentIntent is confirmed and any required actions from the
   * user are complete. If no Customer was provided, the payment method can still be
   * [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the
   * transaction completes.
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize
   * your payment flow and comply with regional legislation and network rules, such as
   * [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  @optional
  string setup_future_usage;

  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  @optional
  string object;

  /**
   * An arbitrary string attached to the object. Often useful for displaying to users.
   */
  @optional
  string description;

  /**
   * The list of payment method types (e.g. card) that this PaymentIntent is allowed to use.
   */
  @optional
  string[] payment_method_types;

  /**
   * Shipping information for this PaymentIntent.
   */
  @optional
  Shipping shipping;

  mixin AddBuilder!(typeof(this));

}
