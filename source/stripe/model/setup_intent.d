// File automatically generated from OpenAPI spec.
module stripe.model.setup_intent;

import vibe.data.serialization : optional;
import vibe.data.json : Json;

import std.typecons : Nullable;

import stripe.model.account : Account;
import stripe.model.api_errors : ApiErrors;
import stripe.model.application : Application;
import stripe.model.customer : Customer;
import stripe.model.deleted_customer : DeletedCustomer;
import stripe.model.mandate : Mandate;
import stripe.model.payment_method : PaymentMethod;
import stripe.model.setup_attempt : SetupAttempt;
import stripe.model.setup_intent_next_action : SetupIntentNextAction;
import stripe.model.setup_intent_payment_method_options : SetupIntentPaymentMethodOptions;

/**
 * A SetupIntent guides you through the process of setting up and saving a customer's payment
 * credentials for future payments.
 * For example, you could use a SetupIntent to set up and save your customer's card without
 * immediately collecting a payment.
 * Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the
 * payment flow.
 * Create a SetupIntent as soon as you're ready to collect your customer's payment credentials.
 * Do not maintain long-lived, unconfirmed SetupIntents as they may no longer be valid.
 * The SetupIntent then transitions through multiple
 * [statuses](https://stripe.com/docs/payments/intents#intent-statuses) as it guides
 * you through the setup process.
 * Successful SetupIntents result in payment credentials that are optimized for future payments.
 * For example, cardholders in [certain regions](/guides/strong-customer-authentication) may need
 * to be run through
 * [Strong Customer Authentication](https://stripe.com/docs/strong-customer-authentication) at the
 * time of payment method collection
 * in order to streamline later [off-session
 * payments](https://stripe.com/docs/payments/setup-intents).
 * If the SetupIntent is used with a
 * [Customer](https://stripe.com/docs/api#setup_intent_object-customer), upon success,
 * it will automatically attach the resulting payment method to that Customer.
 * We recommend using SetupIntents or
 * [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
 * PaymentIntents to save payment methods in order to prevent saving invalid or unoptimized
 * payment methods.
 * By using SetupIntents, you ensure that your customers experience the minimum set of required
 * friction,
 * even as regulations change over time.
 * Related guide: [Setup Intents API](https://stripe.com/docs/payments/setup-intents).
 */
class SetupIntent {
  /**
   * ID of the single_use Mandate generated by the SetupIntent.
   */
  @optional
  Json single_use_mandate;

  /**
   * The list of payment method types (e.g. card) that this SetupIntent is allowed to set up.
   */
  @optional
  Nullable!(string)[] payment_method_types;

  /**
   * Unique identifier for the object.
   */
  @optional
  Nullable!(string) id;

  /**
   * ID of the Customer this SetupIntent belongs to, if one exists.
   * If present, the SetupIntent's payment method will be attached to the Customer on successful
   * setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
   */
  @optional
  Json customer;

  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an
   * object. This can be useful for storing additional information about the object in a
   * structured format.
   */
  @optional
  Nullable!(string)[string] metadata;

  /**
   * Payment-method-specific configuration for this SetupIntent.
   */
  @optional
  SetupIntentPaymentMethodOptions payment_method_options;

  /**
   * If present, this property tells you what actions you need to take in order for your customer
   * to continue payment setup.
   */
  @optional
  SetupIntentNextAction next_action;

  /**
   * Indicates how the payment method is intended to be used in the future.
   * Use `on_session` if you intend to only reuse the payment method when the customer is in your
   * checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. If
   * not provided, this value defaults to `off_session`.
   */
  @optional
  Nullable!(string) usage;

  /**
   * The client secret of this SetupIntent. Used for client-side retrieval using a publishable
   * key.
   * The client secret can be used to complete payment setup from your frontend. It should not be
   * stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS
   * enabled on any page that includes the client secret.
   */
  @optional
  Nullable!(string) client_secret;

  /**
   * If present, the SetupIntent's payment method will be attached to the in-context Stripe
   * Account.
   * It can only be used for this Stripe Accountâ€™s own money movement flows like InboundTransfer
   * and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a
   * Customer, and defaults to false when attaching a PaymentMethod to a Customer.
   */
  @optional
  Nullable!(bool) attach_to_self;

  /**
   * ID of the Connect application that created the SetupIntent.
   */
  @optional
  Json application;

  /**
   * ID of the payment method used with this SetupIntent.
   */
  @optional
  Json payment_method;

  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object
   * exists in test mode.
   */
  @optional
  Nullable!(bool) livemode;

  /**
   * Indicates the directions of money movement for which this payment method is intended to be
   * used.
   * Include `inbound` if you intend to use the payment method as the origin to pull funds from.
   * Include `outbound` if you intend to use the payment method as the destination to send funds
   * to. You can include both if you intend to use the payment method for both purposes.
   */
  @optional
  Nullable!(string)[] flow_directions;

  /**
   * The error encountered in the previous SetupIntent confirmation.
   */
  @optional
  ApiErrors last_setup_error;

  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  @optional
  Nullable!(string) object;

  /**
   * The most recent SetupAttempt for this SetupIntent.
   */
  @optional
  Json latest_attempt;

  /**
   * Reason for cancellation of this SetupIntent, one of `abandoned`, `requested_by_customer`, or
   * `duplicate`.
   */
  @optional
  Nullable!(string) cancellation_reason;

  /**
   * An arbitrary string attached to the object. Often useful for displaying to users.
   */
  @optional
  Nullable!(string) description;

  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  @optional
  Nullable!(long) created;

  /**
   * The account (if any) for which the setup is intended.
   */
  @optional
  Json on_behalf_of;

  /**
   * [Status](https://stripe.com/docs/payments/intents#intent-statuses) of this SetupIntent, one
   * of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`,
   * `canceled`, or `succeeded`.
   */
  @optional
  Nullable!(string) status;

  /**
   * ID of the multi use Mandate generated by the SetupIntent.
   */
  @optional
  Json mandate;

}
